//BY NEURONS ART AND TECHNOLOGY ALL RIGHTS RESERVED AND COPYRIGHTED.//IN ASSOCIATION WITH LC CARGO XPRESS LOS ANGELES//AUTHORS: SUI GENERIS / OSCAR ALCANTARA//!!!!   IMPORTANT ====== ALWAYS SEND THE VARIABLE USER = PARSE.USER.CURRENT() TO ALL TEMPLATES FOR NO INTERNAL SERVER ERROR WHEN USING THE TOPBAR IN THE GENERALS PARTITIONSexports.login = function(req, res){      res.render('login.ejs');};//logout userexports.logout = function(req, res) {    Parse.User.logOut();    res.redirect('/');  };//Logins USER exports.logins = function(req, res){  Parse.User.logIn(req.body.usrname, req.body.pwd).then(function(user) {	  res.redirect('/profile');  }, function(error) {// Show the error message and let the user try again    res.render('login.ejs');  });};//directs to profile needs user sessionexports.profile = function(req, res){	var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current()){      res.redirect('/');	  //IF USER IS A STAFF  }else if(usrClass == "staff"){	  var user = Parse.User.current();	      res.render('staff_profile.ejs', { 			  user: user	      });	  //IF USER IS A CLIENT REDIRECT TO THE HOME FOR CLIENTS  }else if(usrClass == "client"){	  var usrID = Parse.User.current().get("ClientID");	  var queryClients = new Parse.Query("Clients");	  queryClients.equalTo("objectId", usrID);	  queryClients.first({		  success: function(object){	      res.render('client_profile.ejs', { 	  		user: object	      });	  }	  });    }else if(usrClass == "agency"){	  var usrID = Parse.User.current().get("AgencyID");	  var queryAgency = new Parse.Query("Agencies");	  queryAgency.equalTo("objectId", usrID);	  queryAgency.first({		  success: function(object){	      res.render('agency_profile.ejs', { 	  		agency: object	      });	  }	  });    }};//STAFF SECTION//SHOWS WAREHOUSE TABLE OF LABELS (LABELS ARE RAW BOXES THAT ARRIVED AND HAVENT BEEN CONSOLIDATED)//SHOWS WAREHOUSE TABLEexports.staffWarehouse = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}else{		var queryWareHouse = new Parse.Query("WareHouse");		queryWareHouse.descending('createdAt');        //INCLUDE        queryWareHouse.include("Shipper");        queryWareHouse.include("Consignee");        		queryWareHouse.find().then(			function(results){		                    res.render('staff_warehouse.ejs', {labels: results,						user: user					});				});	}};function volume_condition(){    //VOLUME CONDITION    if(req.body.filterby == "volume")    {        var volume = req.body.searchtext;                if(req.body.volumecond == "lessthan")        {            queryWareHouse.lessThan('Volume', parseInt(volume) );                        //res.render('debug.ejs', {vardump:volume});            //return;         }        else if(req.body.volumecond == "greaterthan")        {            queryWareHouse.greaterThan('Volume', parseInt(volume) );        }        else        {            queryWareHouse.equalTo('Volume', parseInt(volume) );        }    }    }function date_condition(){    //DATE INTERVAL    if(req.body.filterby == "Date")    {        //var begindate = new Date(parseInt(y), parseInt(m)-1, parseInt(d));        var begindate = new Date(req.body.searchtext);        var enddate = new Date(req.body.filterdate);                queryWareHouse.greaterThan('ReceiptDate', begindate);        queryWareHouse.lessThan('ReceiptDate', enddate );                 //res.render('debug.ejs', {vardump:enddate});        //return;     }    else    {   //si no fue date interval, entonces checar el rango de fecha preseleccionado        if(req.body.filterdate == "Today")        {            var now = new Date();            now.setHours(0,0,0);                        nowbegin = new Date(now.getTime() - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render('debug.ejs', {vardump:nowend});            //return;         }        else if(req.body.filterdate == "Yesterday")        {            var now = new Date();            now.setHours(0,0,0);                        var difftime = (24 * 3600 * 1000); // one day                        nowbegin = new Date(now.getTime() - difftime - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() - difftime + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                    }        else if(req.body.filterdate == "This week")        {                        var now = new Date();            now.setHours(0,0,0);                        //dia de la semana            var nday = now.getDay()+1;  //index zero based                        var difftime = nday * (24 * 3600 * 1000); // number of day to substract to current date                        nowbegin = new Date(now.getTime() - difftime - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                    }        else if(req.body.filterdate == "This month")        {                        var now = new Date();            now.setHours(0,0,0);                        //dia del mes            var nday = now.getDate()-1;                        var difftime = nday * (24 * 3600 * 1000); // number of day to substract to current date                        nowbegin = new Date(now.getTime() - difftime - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render('debug.ejs', {vardump:nowbegin});            //return;         }        else if(req.body.filterdate == "Last month")        {                        var now = new Date();            now.setHours(0,0,0);            now.setDate(0);                        //mes del anio            //var n = now.getMonth()-1;                        nowbegin = new Date(now.getTime() - (1000) );            nowbegin.setMonth(now.getMonth()-1 );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render('debug.ejs', {vardump:nowbegin});            //return;         }        else if(req.body.filterdate == "Current year")        {                        var now = new Date();            now.setHours(0,0,0);                        nowbegin = new Date(now.getTime() - (1000) );            nowbegin.setDate( 1 );            nowbegin.setMonth(0);                        var nowend = new Date(now.getTime() );            nowend.setHours(23,59,59);                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render('debug.ejs', {vardump:nowend});            //return;         }    }}function warefilter(results){	    //variables que vienen por POST    var filterby = req.body.filterby;    var searchtext = req.body.searchtext;        //en este arreglo almacenaremos el resultado filtrado    var resultfilter = [];		           //recorrer la lista de objetos en el resultado    for (var i = 0; i < results.length; i++){        var object = results[i];                //obtenemos el valor de este objeto en el campo de busqueda        var field = object.get(filterby);        if(filterby == "Transport"  || filterby == "Country" || filterby == "Warehouse" || filterby == "Invoice"){            //minusculas             field = field.toLowerCase();            searchtext = searchtext.toLowerCase();            //verificar si contiene el texto que buscamos            if(field.search(searchtext) != -1){            resultfilter.push(object);            }        }else if(filterby == "Receipt"){            if(field == parseInt(searchtext) ){                //agregar a la nueva lista de resultado                resultfilter.push(object);            }        }else if(filterby == "Shipper" || filterby == "Consignee"){            field = field.get('Name');            //minusculas             field = field.toLowerCase();            searchtext = searchtext.toLowerCase();                            //verificar si contiene el texto que buscamos            if(field.search(searchtext) != -1){                resultfilter.push(object);            }        }        else resultfilter.push(object);    }        return resultfilter;}//creates a warehouse receiptexports.staffNewLabel = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');			  }else{	 res.render('staff_newLabel.ejs', {correction: "n",	  user: user});}};//opens a blank warehouse receipt form in sepparate windowexports.newlabelFloat = function(req, res){      res.render('newLabelBlank.ejs', {correction: "y"});};//opens table to consolidateexports.consolidateLabelTable = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}else{		var queryWareHouse = new Parse.Query("WareHouse");		queryWareHouse.descending('createdAt');        //INCLUDE        queryWareHouse.include("Shipper");        queryWareHouse.include("Consignee");        		queryWareHouse.find().then(			function(results){		                    res.render('staff_newConsolidate.ejs', {labels: results,						user: user					});				});	}};//SHOWS AND FILTER WAREHOUSE TABLEexports.staffWarehouseFilter = function(request, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {        req = request;        		queryWareHouse = new Parse.Query("WareHouse");		queryWareHouse.descending('createdAt');                volume_condition();                date_condition();                //INCLUDE        queryWareHouse.include("Shipper");        queryWareHouse.include("Consignee");                		queryWareHouse.find().then(			function(results){	                                resultfilter = warefilter(results);                                res.render('staff_warehouse.ejs', {labels: resultfilter, user:user});                            });	}};//Staff client's section //direct to clients page needs user sessions and displays active clientsexports.activeClients = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency") {   res.redirect('/');	  }else{	  var queryClients = new Parse.Query("Clients");	  queryClients.equalTo("Status", "Active");	  queryClients.descending('createdAt');	  queryClients.find({	  success: function(results){	  	res.render('staff_activeClients.ejs', { 	  	clients: results,			user: user   		 });   		    }   		});	   	   }	   	   };           //Staff client's section //direct to clients page needs user sessions and displays active clientsexports.activeClientsFilter = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")     {        res.redirect('/');    }    else    {	  var queryClients = new Parse.Query("Clients");	  queryClients.equalTo("Status", "Active");	  queryClients.descending('createdAt');	  queryClients.find({	  success:             function(results)            {                //variables que vienen por POST                var filterby = req.body.filterby;                var searchtext = req.body.searchtext;                var showfirst = parseInt(req.body.showfirst, 10);	//maximo de resultados, convertido a entero                //en este arreglo almacenaremos el resultado filtrado                var resultfilter = [];		                //recorrer la lista de objetos en el resultado                for (var i = 0; i < results.length; i++)                {                    var object = results[i];                    //obtenemos el valor de este objeto en el campo de busqueda                    var field = object.get(filterby);                    //minusculas                     field = field.toLowerCase();                    searchtext = searchtext.toLowerCase();                    //verificar si contiene el texto que buscamos                    if(field.search(searchtext) != -1)                    {                        //agregar a la nueva lista de resultado                        resultfilter.push(object);                        if(resultfilter.length >= showfirst)                            break;                    }                }                res.render('staff_activeClients.ejs', {clients: resultfilter, user: user});   		    }   		});    }};		   //pending clients//direct to clients page needs user sessions and displays pending clients to be given a username and passwordexports.pendingClients = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");   if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" ) {      res.redirect('/');		  }else{	 var queryClients = new Parse.Query("Clients");	     queryClients.equalTo("Status", "Pending");		 queryClients.descending('createdAt');		 queryClients.find({		    success: function(results){		     	res.render('staff_pendingClients.ejs', { 		  	clients: results,					user: user		   	   		 });		   	   		    }		   	   		});		   	   }		   	   };                exports.pendingClientsFilter = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");   if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" ) {      res.redirect('/');		  }else{	 var queryClients = new Parse.Query("Clients");	     queryClients.equalTo("Status", "Pending");		 queryClients.descending('createdAt');		 queryClients.find({		    success: function(results){                                //variables que vienen por POST                var filterby = req.body.filterby;                var searchtext = req.body.searchtext;                var showfirst = parseInt(req.body.showfirst, 10);	//maximo de resultados, convertido a entero                //en este arreglo almacenaremos el resultado filtrado                var resultfilter = [];		                //recorrer la lista de objetos en el resultado                for (var i = 0; i < results.length; i++)                {                    var object = results[i];                    //obtenemos el valor de este objeto en el campo de busqueda                    var field = object.get(filterby);                    //minusculas                     field = field.toLowerCase();                    searchtext = searchtext.toLowerCase();                    //verificar si contiene el texto que buscamos                    if(field.search(searchtext) != -1)                    {                        //agregar a la nueva lista de resultado                        resultfilter.push(object);                        if(resultfilter.length >= showfirst)                            break;                    }                }                                		     	res.render('staff_pendingClients.ejs', { clients: resultfilter,user: user});		   	   		    }		   	   		});		   	   }		   	   }; 	//SHOWS CLIENT'S RESERVATIONS TO STAFF MEMBERSexports.reservations = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");   if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" ) {	 res.redirect('/');    	 }else{	 var queryReservations = new Parse.Query("Reservations");		 queryReservations.descending('createdAt');	     queryReservations.find({		 success: function(object) {			res.render('staff_reservations.ejs',{ 			    reservations: object,				user: user			            });			        }			        });			   	 }			    };                exports.reservations_filter = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");   if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" ) {	 res.redirect('/');    	 }else{	 var queryReservations = new Parse.Query("Reservations");		 queryReservations.descending('createdAt');	     queryReservations.find({		 success: function(results) {                         //variables que vienen por POST            var filterby = req.body.filterby;            var searchtext = req.body.searchtext;            var showfirst = parseInt(req.body.showfirst, 10);	//maximo de resultados, convertido a entero            //en este arreglo almacenaremos el resultado filtrado            var resultfilter = [];	            //recorrer la lista de objetos en el resultado            for (var i = 0; i < results.length; i++)            {                var object = results[i];                //obtenemos el valor de este objeto en el campo de busqueda                var field = object.get(filterby);                //minusculas                 field = field.toLowerCase();                searchtext = searchtext.toLowerCase();		                //verificar si contiene el texto que buscamos                 if(field.search(searchtext) != -1)                 {                    //agregar a la nueva lista de resultado                    resultfilter.push(object);                                        if(resultfilter.length >= showfirst)                    break;                }                            }			res.render('staff_reservations.ejs',{ 			    reservations: resultfilter,				user: user			            });			        			        }			   	 });	}};//STAFF AGENCIE'S SECTION//renders and display active agencies	    exports.activeAgencies = function(req, res){	 var user = Parse.User.current();	 var usrClass = Parse.User.current().get("Class");	 //Permisions to visit section of the page if(!Parse.User.current() || usrClass === "client"){	  res.redirect('/');	     }else{   var queryAgencies = new Parse.Query("Agencies");   queryAgencies.equalTo("Status", "Active");   queryAgencies.descending('createdAt');   queryAgencies.find({		 success: function(results){				res.render('staff_activeAgencies.ejs', {					 agencies: results,					user: user					   	});					  }				   });			   }		   };		   //renders and display pending agencies	    exports.pendingAgencies = function(req, res){   var user = Parse.User.current();   var usrClass = Parse.User.current().get("Class");   //Permisions to visit section of the page   if(!Parse.User.current() || usrClass === "client"){    res.redirect('/');		  }else{	var queryAgencies = new Parse.Query("Agencies");	 queryAgencies.equalTo("Status", "Pending");	 queryAgencies.descending('createdAt');     queryAgencies.find({	    success: function(results){		  res.render('staff_pendingAgencies.ejs', {		  	agencies: results,		  	user: user		  			});		  		 }		  	  });		  			   }		  		   };