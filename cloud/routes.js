//BY NEURONS ART AND TECHNOLOGY ALL RIGHTS RESERVED AND COPYRIGHTED.//IN ASSOCIATION WITH LC CARGO XPRESS LOS ANGELES//AUTHORS: SUI GENERIS / OSCAR ALCANTARA//  IMPORTANT  ALWAYS SEND THE VARIABLE USER = PARSE.USER.CURRENT() TO ALL TEMPLATES FOR NO INTERNAL SERVER ERROR WHEN USING THE TOPBAR IN THE GENERALS PARTITIONSexports.login = function(req, res){      res.render('login.ejs');};exports.register = function(req, res){      res.render('register.ejs');};//logout userexports.logout = function(req, res) {    Parse.User.logOut();    res.redirect('/');  };//Logins USER exports.logins = function(req, res){  Parse.User.logIn(req.body.usrname, req.body.pwd).then(function(user) {	  res.redirect('/profile');  }, function(error) {// Show the error message and let the user try again    res.render('login.ejs');  });};//directs to profile needs user sessionexports.profile = function(req, res){	var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current()){      res.redirect('/');	  //IF USER IS A STAFF  }else if(usrClass == "staff"){	  var user = Parse.User.current();	      res.render('staff_profile.ejs', { 			  user: user	      });	  //IF USER IS A CLIENT REDIRECT TO THE HOME FOR CLIENTS  }else if(usrClass == "client"){	  var usrID = Parse.User.current().get("ClientID");	  var queryClients = new Parse.Query("Clients");	  queryClients.equalTo("objectId", usrID);	  queryClients.first({		  success: function(object){	      res.render('client_profile.ejs', { 	  		user: object	      });	  }	  });    }else if(usrClass == "agency"){	  var usrID = Parse.User.current().get("AgencyID");	  var queryAgency = new Parse.Query("Agencies");	  queryAgency.equalTo("objectId", usrID);	  queryAgency.first({		  success: function(object){	      res.render('agency_profile.ejs', { 	  		agency: object	      });	  }	  });    }};//STAFF SECTION//SHOWS WAREHOUSE TABLE OF LABELS (LABELS ARE RAW BOXES THAT ARRIVED AND HAVENT BEEN CONSOLIDATED)//SHOWS WAREHOUSE TABLEexports.staffWarehouse = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}else{		var queryWareHouse = new Parse.Query("WareHouse");		queryWareHouse.descending('createdAt');        //INCLUDE        queryWareHouse.include("Shipper");        queryWareHouse.include("Consignee");        		queryWareHouse.find().then(			function(results){		                    res.render('staff_warehouse.ejs', {labels: results,						user: user					});				});	}};function volume_condition(){    //VOLUME CONDITION    if(req.body.filterby == "volume")    {        var volume = req.body.searchtext;                if(req.body.volumecond == "lessthan")        {            queryWareHouse.lessThan('Volume', parseInt(volume) );                        //res.render(debug.ejs, {vardump:volume});            //return;         }        else if(req.body.volumecond == "greaterthan")        {            queryWareHouse.greaterThan('Volume', parseInt(volume) );        }        else        {            queryWareHouse.equalTo('Volume', parseInt(volume) );        }    }    }function date_condition(){    //DATE INTERVAL    if(req.body.filterby == "Date")    {        //var begindate = new Date(parseInt(y), parseInt(m)-1, parseInt(d));        var begindate = new Date(req.body.searchtext);        var enddate = new Date(req.body.filterdate);                queryWareHouse.greaterThan('ReceiptDate', begindate);        queryWareHouse.lessThan('ReceiptDate', enddate );                 //res.render(debug.ejs, {vardump:enddate});        //return;     }    else    {   //si no fue date interval, entonces checar el rango de fecha preseleccionado        if(req.body.filterdate == "Today")        {            var now = new Date();            now.setHours(0,0,0);                        nowbegin = new Date(now.getTime() - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render(debug.ejs, {vardump:nowend});            //return;         }        else if(req.body.filterdate == "Yesterday")        {            var now = new Date();            now.setHours(0,0,0);                        var difftime = (24 * 3600 * 1000); // one day                        nowbegin = new Date(now.getTime() - difftime - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() - difftime + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                    }        else if(req.body.filterdate == "This week")        {                        var now = new Date();            now.setHours(0,0,0);                        //dia de la semana            var nday = now.getDay()+1;  //index zero based                        var difftime = nday * (24 * 3600 * 1000); // number of day to substract to current date                        nowbegin = new Date(now.getTime() - difftime - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                    }        else if(req.body.filterdate == "This month")        {                        var now = new Date();            now.setHours(0,0,0);                        //dia del mes            var nday = now.getDate()-1;                        var difftime = nday * (24 * 3600 * 1000); // number of day to substract to current date                        nowbegin = new Date(now.getTime() - difftime - (1000) );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render(debug.ejs, {vardump:nowbegin});            //return;         }        else if(req.body.filterdate == "Last month")        {                        var now = new Date();            now.setHours(0,0,0);            now.setDate(0);                        //mes del anio            //var n = now.getMonth()-1;                        nowbegin = new Date(now.getTime() - (1000) );            nowbegin.setMonth(now.getMonth()-1 );                        var time = (24 * 3600 * 1000)-1000;            var nowend = new Date(now.getTime() + (time) );                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render(debug.ejs, {vardump:nowbegin});            //return;         }        else if(req.body.filterdate == "Current year")        {                        var now = new Date();            now.setHours(0,0,0);                        nowbegin = new Date(now.getTime() - (1000) );            nowbegin.setDate( 1 );            nowbegin.setMonth(0);                        var nowend = new Date(now.getTime() );            nowend.setHours(23,59,59);                        queryWareHouse.greaterThanOrEqualTo('ReceiptDate', nowbegin );            queryWareHouse.lessThanOrEqualTo('ReceiptDate', nowend );                        //res.render(debug.ejs, {vardump:nowend});            //return;         }    }}function warefilter(results){	    //variables que vienen por POST    var filterby = req.body.filterby;    var searchtext = req.body.searchtext;        //en este arreglo almacenaremos el resultado filtrado    var resultfilter = [];		           //recorrer la lista de objetos en el resultado    for (var i = 0; i < results.length; i++){        var object = results[i];                //obtenemos el valor de este objeto en el campo de busqueda        var field = object.get(filterby);        if(filterby == "Transport"  || filterby == "Country" || filterby == "Warehouse" || filterby == "Invoice"){            //minusculas             field = field.toLowerCase();            searchtext = searchtext.toLowerCase();            //verificar si contiene el texto que buscamos            if(field.search(searchtext) != -1){            resultfilter.push(object);            }        }else if(filterby == "Receipt"){            if(field == parseInt(searchtext) ){                //agregar a la nueva lista de resultado                resultfilter.push(object);            }        }else if(filterby == "Shipper" || filterby == "Consignee"){            field = field.get('Name');            //minusculas             field = field.toLowerCase();            searchtext = searchtext.toLowerCase();                            //verificar si contiene el texto que buscamos            if(field.search(searchtext) != -1){                resultfilter.push(object);            }        }        else resultfilter.push(object);    }        return resultfilter;}//creates a warehouse receiptexports.staffNewLabel = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');			  }else{	 res.render('staff_newLabel.ejs', {correction: "n",	  user: user});}};//opens a blank warehouse receipt form in sepparate windowexports.newlabelFloat = function(req, res){      res.render('newLabelBlank.ejs', {correction: "y"});};//opens a blank warehouse receipt form in sepparate windowexports.staff_Repack = function(req, res){        var usrClass = Parse.User.current().get("Class");    var user = Parse.User.current();    if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){        res.redirect('/');    }    else    {        res.render('staff_Repack.ejs', {user:user});    }};//opens table to consolidateexports.consolidateLabelTable = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency"){			res.redirect('/');	}else{		var queryWareHouse = new Parse.Query("WareHouse");		queryWareHouse.descending('createdAt');        //INCLUDE        queryWareHouse.include("Shipper");        queryWareHouse.include("Consignee");        		queryWareHouse.find().then(			function(results){		                    res.render('staff_newConsolidate.ejs', {labels: results,						user: user, correction:"y"					});				});	}};exports.staff_warehouse_consolidate = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {		        //res.render(debug.ejs, {vardump:req.params.myparam});        //return;                         var consolidate = "Consolidate detail:\n\n";        var stritems = req.params.myparam;        var items = stritems.split(',');                for(i in items)        {            if(items[i] != '')                consolidate += "Receipt number: " + items[i] + "\n---------------------------\n";        }                res.render('staff_newLabelConsolidate.ejs', {correction: "y", myparam:consolidate, user: user });	}};exports.addconsolidation = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                            //generation of the receipt number        var txt_receipt = 1;                var repackquery = new Parse.Query("Repacks");                if( typeof repackquery != 'undefined')        {            repackquery.descending('Receipt');                        repackquery.first().then(                        function(result)                        {                            var r = result.get('Receipt');                            if( typeof r == "undefined")                            {                                txt_receipt = 1;                            }                            else                            {                                txt_receipt = r+1;                            }                                                    }                    );        }                          var txt_receiptDate = new Date(req.body.txt_receiptDate);                var txt_agent = req.body.txt_agent;        var txt_shipper = req.body.txt_shipper;        var txt_consignee = req.body.txt_consignee;        var lst_transport = req.body.lst_transport;        var lst_warehouse = req.body.lst_warehouse;        var usrCountry = req.body.usrCountry;        var txt_prices = req.body.txt_prices;        var txt_extracost = req.body.txt_extracost;        var txt_weight = req.body.txt_weight;        var txt_invoice = req.body.txt_invoice;        var txt_weightvol = req.body.txt_weightvol;        var txt_value = req.body.txt_value;        var txt_volume = req.body.txt_volume;        var txt_zone = req.body.txt_zone;        var txt_content = req.body.txt_content;        var txt_generalnotes = req.body.txt_generalnotes;        var txt_internalnotes = req.body.txt_internalnotes;        var clientID = req.body.txt_clientID;        var agencyID = req.body.agencyID;        var correction = req.body.correction;        //extraccion de las cajas        var c=1;        var boxes = [];        do{            boxes.push({                        'lenght':req.body["txt_length-" + c.toString()],                        'width':req.body["txt_width-" + c.toString()],                        'height':req.body["txt_height-" + c.toString()],                        'weight':req.body["txt_weight-" + c.toString()],                        'boxes':req.body["txt_boxes-" + c.toString()]});                        c += 1;        }        while(typeof req.body["txt_length-" + c.toString()] != "undefined");                 // The object was retrieved successfully.        //the data of the related objects        var Clients = Parse.Object.extend("Clients");        var query2 = new Parse.Query(Clients);	        query2.get( clientID ,{            success:             function(client){                              //res.render(debug.ejs, {vardump:client});                    //return;                                    var Repacks = Parse.Object.extend("Repacks");                    var repack = new Repacks();                                        //save the client as a pointer                    repack.set("Consignee", client);                                                                                       //Save warehouse                    repack.save({                        Receipt: txt_receipt,                        ReceiptDate: txt_receiptDate,                        Agent: txt_agent,                        Transport: lst_transport,                        Warehouse: lst_warehouse,                        Country: usrCountry,                        Prices: txt_prices,                        ExtraCost: txt_extracost,                        Weight: txt_weight,                        Invoice: txt_invoice,                        WeightVol: txt_weightvol,                        Value: txt_value,                        Volume: txt_volume,                        Zone: txt_zone,                        Content: txt_content,                        GeneralNotes: txt_generalnotes,                        InternalNotes: txt_internalnotes,                        Boxes: JSON.stringify(boxes)                      }, {                        success: function(post) {                            if(correction === "y"){                            res.redirect("/newlabel");                        }else{                            res.redirect("/staff_newLabel");                        }                        },                        error: function(post, error) {                          // The save failed.                          // error is a Parse.Error with an error code and message.                        }                      });                       },                error: 	//error on query for Agencies by objectID                function(object, error){                        // The object was not retrieved successfully.                        // error is a Parse.Error with an error code and message.                                            }            });    }         };// insert a new warehouse LABELexports.addwarehousepost = function(req, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();		if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {	                    var queryWareHouse = new Parse.Query("WareHouse");        queryWareHouse.descending('Receipt');                //generation of the receipt number        var txt_receipt = 1;                        queryWareHouse.first().then(                    function(result)                    {                        var r = result.get('Receipt');                        if( typeof r == "undefined")                        {                            txt_receipt = 1;                        }                        else                        {                            txt_receipt = r+1;                        }                                            }                );                          var txt_receiptDate = new Date(req.body.txt_receiptDate);                var txt_agent = req.body.txt_agent;        var txt_shipper = req.body.txt_shipper;        var txt_consignee = req.body.txt_consignee;        var lst_transport = req.body.lst_transport;        var lst_warehouse = req.body.lst_warehouse;        var usrCountry = req.body.usrCountry;        var txt_prices = req.body.txt_prices;        var txt_extracost = req.body.txt_extracost;        var txt_weight = req.body.txt_weight;        var txt_invoice = req.body.txt_invoice;        var txt_weightvol = req.body.txt_weightvol;        var txt_value = req.body.txt_value;        var txt_volume = req.body.txt_volume;        var txt_zone = req.body.txt_zone;        var txt_content = req.body.txt_content;        var txt_generalnotes = req.body.txt_generalnotes;        var txt_internalnotes = req.body.txt_internalnotes;        var clientID = req.body.txt_clientID;        var agencyID = req.body.agencyID;        var correction = req.body.correction;        //extraccion de las cajas        var c=1;        var boxes = [];        do{            boxes.push({                        'lenght':req.body["txt_length-" + c.toString()],                        'width':req.body["txt_width-" + c.toString()],                        'height':req.body["txt_height-" + c.toString()],                        'weight':req.body["txt_weight-" + c.toString()],                        'boxes':req.body["txt_boxes-" + c.toString()]});                        c += 1;        }        while(typeof req.body["txt_length-" + c.toString()] != "undefined");                 //res.render(debug.ejs, {vardump:clientID});        //return;                agency = "Cool";                //the data of the related objects        var query = new Parse.Query("Agencies");        //query.descending(createdAt);        //query.equalTo(objectId, req.body.agencyID)        query.get(req.body.agencyID, {            success:                 function(agency)                 {                    // The object was retrieved successfully.                    //the data of the related objects                    var Clients = Parse.Object.extend("Clients");                    var query2 = new Parse.Query(Clients);	                    query2.get( clientID ,{                        success:                         function(client){                                                      //res.render(debug.ejs, {vardump:client});                                //return;                                                            var WareHouse = Parse.Object.extend("WareHouse");                                var warehouse = new WareHouse();                                //save the agency as a pointer                                warehouse.set("Shipper", agency);                                //save the client as a pointer                                warehouse.set("Consignee", client);                                                                                                                                       //Save warehouse                                warehouse.save({                                    Receipt: txt_receipt,                                    ReceiptDate: txt_receiptDate,                                    Agent: txt_agent,                                    Transport: lst_transport,                                    Warehouse: lst_warehouse,                                    Country: usrCountry,                                    Prices: txt_prices,                                    ExtraCost: txt_extracost,                                    Weight: txt_weight,                                    Invoice: txt_invoice,                                    WeightVol: txt_weightvol,                                    Value: txt_value,                                    Volume: txt_volume,                                    Zone: txt_zone,                                    Content: txt_content,                                    GeneralNotes: txt_generalnotes,                                    InternalNotes: txt_internalnotes,                                    Boxes: JSON.stringify(boxes)                                  }, {                                    success: function(post) {                                        if(correction === "y"){                                        res.redirect("/newlabel");                                    }else{                                        res.redirect("/staff_newLabel");                                    }                                    },                                    error: function(post, error) {                                      // The save failed.                                      // error is a Parse.Error with an error code and message.                                    }                                  });                                   },                            error: 	//error on query for Agencies by objectID                            function(object, error){                                    // The object was not retrieved successfully.                                    // error is a Parse.Error with an error code and message.                                                                    }                        });                }            ,            error:                 function(object, error)                 {                    // The object was not retrieved successfully.                    // error is a Parse.Error with an error code and message.                    // The object was retrieved successfully.                    res.render("debug.ejs", {vardump:"ERROR"});                    return;                  }        });    }       			};//peticion POST de autofill shipperexports.autofill_shipper = function(req, res){	if(!Parse.User.current()){		res.redirect('/');	}else{			var query = new Parse.Query("Agencies");		query.descending('createdAt');		query.find({		success: 		function(results){				//variables que vienen por POST				var txt_shipper = req.body.txt_agency;				//en este arreglo almacenaremos el resultado				var resultsearch = [];				//recorrer la lista de objetos en el resultado				for (var i = 0; i < results.length; i++){					var object = results[i];					//obtenemos el nombre de la agencia					var field = object.get("Name");					//minusculas 					field = field.toLowerCase();					txt_shipper = txt_shipper.toLowerCase();					//verificar si contiene el texto que buscamos					if(field.search(txt_shipper) != -1){						//agregar a la nueva lista de resultado						resultsearch.push(object);					}				}				res.send(JSON.stringify(resultsearch));			}		});	}};//peticion POST para hacer busqueda de clientes usando AJAXexports.autofill_client = function(req, res){	if(!Parse.User.current()){		res.redirect('/');	}else{			var query = new Parse.Query("Clients");		query.descending('createdAt');		query.find({		success: 		function(results){				//variables que vienen por POST				var txt_search = req.body.txt_search;				//en este arreglo almacenaremos el resultado				var resultsearch = [];				//recorrer la lista de objetos en el resultado				for (var i = 0; i < results.length; i++){					var object = results[i];					//obtenemos el nombre de la agencia					var field = object.get("Name");					//minusculas 					field = field.toLowerCase();					txt_search = txt_search.toLowerCase();					//verificar si contiene el texto que buscamos					if(field.search(txt_search) != -1){						//agregar a la nueva lista de resultado						resultsearch.push(object);					}				}				res.send(JSON.stringify(resultsearch));			}		});	}};//SHOWS AND FILTER WAREHOUSE TABLEexports.staffWarehouseFilter = function(request, res){	var usrClass = Parse.User.current().get("Class");	var user = Parse.User.current();	if(!Parse.User.current() || usrClass === "client"){			res.redirect('/');	}    else    {        req = request;        		queryWareHouse = new Parse.Query("WareHouse");		queryWareHouse.descending('createdAt');                volume_condition();                date_condition();                //INCLUDE        queryWareHouse.include("Shipper");        queryWareHouse.include("Consignee");                		queryWareHouse.find().then(			function(results){	                                resultfilter = warefilter(results);                                res.render('staff_warehouse.ejs', {labels: resultfilter, user:user});                            });	}};//Staff clients section //direct to clients page needs user sessions and displays active clientsexports.activeClients = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency") {   res.redirect('/');	  }else{	  var queryClients = new Parse.Query("Clients");	  queryClients.equalTo("Status", "Active");	  queryClients.descending('createdAt');	  queryClients.find({	  success: function(results){	  	res.render('staff_activeClients.ejs', { 	  	clients: results,			user: user   		 });   		    }   		});	   	   }	   	   };           //Staff clients section //direct to clients page needs user sessions and displays active clientsexports.activeClientsFilter = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");    	if(!Parse.User.current() || usrClass === "client" || usrClass === "agency")     {        res.redirect('/');    }    else    {	  var queryClients = new Parse.Query("Clients");	  queryClients.equalTo("Status", "Active");	  queryClients.descending('createdAt');	  queryClients.find({	  success:             function(results)            {                //variables que vienen por POST                var filterby = req.body.filterby;                var searchtext = req.body.searchtext;                var showfirst = parseInt(req.body.showfirst, 10);	//maximo de resultados, convertido a entero                //en este arreglo almacenaremos el resultado filtrado                var resultfilter = [];		                //recorrer la lista de objetos en el resultado                for (var i = 0; i < results.length; i++)                {                    var object = results[i];                    //obtenemos el valor de este objeto en el campo de busqueda                    var field = object.get(filterby);                    //minusculas                     field = field.toLowerCase();                    searchtext = searchtext.toLowerCase();                    //verificar si contiene el texto que buscamos                    if(field.search(searchtext) != -1)                    {                        //agregar a la nueva lista de resultado                        resultfilter.push(object);                        if(resultfilter.length >= showfirst)                            break;                    }                }                res.render('staff_activeClients.ejs', {clients: resultfilter, user: user});   		    }   		});    }};		   //pending clients//direct to clients page needs user sessions and displays pending clients to be given a username and passwordexports.pendingClients = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");   if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" ) {      res.redirect('/');		  }else{	 var queryClients = new Parse.Query("Clients");	     queryClients.equalTo("Status", "Pending");		 queryClients.descending('createdAt');		 queryClients.find({		    success: function(results){		     	res.render('staff_pendingClients.ejs', { 		  	clients: results,					user: user		   	   		 });		   	   		    }		   	   		});		   	   }		   	   };                exports.pendingClientsFilter = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");   if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" ) {      res.redirect('/');		  }else{	 var queryClients = new Parse.Query("Clients");	     queryClients.equalTo("Status", "Pending");		 queryClients.descending('createdAt');		 queryClients.find({		    success: function(results){                                //variables que vienen por POST                var filterby = req.body.filterby;                var searchtext = req.body.searchtext;                var showfirst = parseInt(req.body.showfirst, 10);	//maximo de resultados, convertido a entero                //en este arreglo almacenaremos el resultado filtrado                var resultfilter = [];		                //recorrer la lista de objetos en el resultado                for (var i = 0; i < results.length; i++)                {                    var object = results[i];                    //obtenemos el valor de este objeto en el campo de busqueda                    var field = object.get(filterby);                    //minusculas                     field = field.toLowerCase();                    searchtext = searchtext.toLowerCase();                    //verificar si contiene el texto que buscamos                    if(field.search(searchtext) != -1)                    {                        //agregar a la nueva lista de resultado                        resultfilter.push(object);                        if(resultfilter.length >= showfirst)                            break;                    }                }                                		     	res.render('staff_pendingClients.ejs', { clients: resultfilter,user: user});		   	   		    }		   	   		});		   	   }		   	   }; 	//SHOWS CLIENTS RESERVATIONS TO STAFF MEMBERSexports.reservations = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");   if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" ) {	 res.redirect('/');    	 }else{	 var queryReservations = new Parse.Query("Reservations");		 queryReservations.descending('createdAt');	     queryReservations.find({		 success: function(object) {			res.render('staff_reservations.ejs',{ 			    reservations: object,				user: user			            });			        }			        });			   	 }			    };                exports.reservations_filter = function(req, res){	var user = Parse.User.current();	var usrClass = Parse.User.current().get("Class");   if(!Parse.User.current() || usrClass === "client" || usrClass === "agency" ) {	 res.redirect('/');    	 }else{	 var queryReservations = new Parse.Query("Reservations");		 queryReservations.descending('createdAt');	     queryReservations.find({		 success: function(results) {                         //variables que vienen por POST            var filterby = req.body.filterby;            var searchtext = req.body.searchtext;            var showfirst = parseInt(req.body.showfirst, 10);	//maximo de resultados, convertido a entero            //en este arreglo almacenaremos el resultado filtrado            var resultfilter = [];	            //recorrer la lista de objetos en el resultado            for (var i = 0; i < results.length; i++)            {                var object = results[i];                //obtenemos el valor de este objeto en el campo de busqueda                var field = object.get(filterby);                //minusculas                 field = field.toLowerCase();                searchtext = searchtext.toLowerCase();		                //verificar si contiene el texto que buscamos                 if(field.search(searchtext) != -1)                 {                    //agregar a la nueva lista de resultado                    resultfilter.push(object);                                        if(resultfilter.length >= showfirst)                    break;                }                            }			res.render('staff_reservations.ejs',{ 			    reservations: resultfilter,				user: user			            });			        			        }			   	 });	}};//STAFF AGENCIES SECTION//renders and display active agencies	    exports.activeAgencies = function(req, res){	 var user = Parse.User.current();	 var usrClass = Parse.User.current().get("Class");	 //Permisions to visit section of the page if(!Parse.User.current() || usrClass === "client"){	  res.redirect('/');	     }else{   var queryAgencies = new Parse.Query("Agencies");   queryAgencies.equalTo("Status", "Active");   queryAgencies.descending('createdAt');   queryAgencies.find({		 success: function(results){				res.render('staff_activeAgencies.ejs', {					 agencies: results,					user: user					   	});					  }				   });			   }		   };		   //renders and display pending agencies	    exports.pendingAgencies = function(req, res){   var user = Parse.User.current();   var usrClass = Parse.User.current().get("Class");   //Permisions to visit section of the page   if(!Parse.User.current() || usrClass === "client"){    res.redirect('/');		  }else{	var queryAgencies = new Parse.Query("Agencies");	 queryAgencies.equalTo("Status", "Pending");	 queryAgencies.descending('createdAt');     queryAgencies.find({	    success: function(results){		  res.render('staff_pendingAgencies.ejs', {		  	agencies: results,		  	user: user		  			});		  		 }		  	  });		  			   }		  		   };				   		//REGISTRATIONS				   // Signs up a new user and data validation  exports.clientReg = function(req, res) {     var usrFullName = req.body.usrFullName;     var usrCompany= req.body.usrCompany;	 var usrCountry = req.body.usrCountry;     var usrState = req.body.usrState;	 var usrCity = req.body.usrCity;	 var usrDestination = req.body.usrDestination;	 var usrAddress = req.body.usrAddress;	 var usrAddress2 = req.body.usrAddress2;	 var usrLanguage = req.body.usrLanguage;	 var usrID1 = req.body.usrID1;	 var usrID2 = req.body.usrID2;	 var usrTel = req.body.usrTel;	 var reg_email = req.body.usrEmail;				      var atpos = reg_email.indexOf("@");				      var dotpos = reg_email.lastIndexOf(".");				  	 var usrNotes = req.body.usrNotes;				  	//not null name				   	if(usrFullName == "" || usrFullName == null || usrFullName.length<2){				   	  res.redirect('/signup');				     //not null company				 	}else if(usrCompany == "" || usrCompany == null){				  	  res.redirect('/signup');				 	//not null username				 	}else if(usrCountry == "" || usrCountry == null){				  	  res.redirect('/signup');				 	//not null STATE				 	}else if(usrState == "" || usrState == null){				 	  res.redirect('/signup');				 	//not null city				  	}else if(usrCity == "" || usrCity == null){				 	  res.redirect('/signup');				 	//not null Destination				 	}else if(usrDestination == "" || usrDestination == null){				 	  res.redirect('/signup');				     //not null Address						 	}else if(usrAddress == "" || usrAddress == null){				 	  res.redirect('/signup');				 	 //not null usrID1				 	}else if(usrID1 == "" || usrID1 == null){				 	  res.redirect('/signup');				 	//not null Tel				     }else if(usrTel == "" || usrTel == null){				       res.redirect('/signup');				 	//not null email				     }else if(reg_email == "" || reg_email == null){				  	  res.redirect('/signup');				    //valid email				  	}else if(atpos < 1 || ( dotpos - atpos < 2 )) {				  	  res.redirect('/signup');				  	//not null password				  	}else{ 					 	   //Create Client Object Client class and client is the new instance of the class				 	    var Client = Parse.Object.extend("Clients");				 	    var client = new Client();				 	//Save Client				 	  client.save({				 	    Name: usrFullName,				 	    Company: usrCompany,				 		Country: usrCountry,				 	    State: usrState,				 		City: usrCity,				 		Destination: usrDestination,				 		Address: usrAddress,				 	    Address2: usrAddress2,				 	    Language: usrLanguage,				 	    ID1: usrID1,				 	    ID2: usrID2,				 		Telephone: usrTel,				 		Email: reg_email,				 		  Status: "Pending",				 		Notes: usrNotes				 	  }, {				 	    success: function(post) {				 			res.redirect("/clientSuccess");				 	    },				 	    error: function(post, error) {				 	      // The save failed.				 	      // error is a Parse.Error with an error code and message.				 	    }				 	  }); 				 	}				 };// Signs up a new Agency and data validationexports.agencyReg = function(req, res) {	var agName = req.body.agName;    var agCountry = req.body.agCountry;    var agState = req.body.agState;	var agCity = req.body.agCity;    var agZip = req.body.agZip;	var agDestination = req.body.agDestination;	var agAddress = req.body.agAddress;	var agAddress2 = req.body.agAddress2;	var agPoBox = req.body.agPoBox;	var agPoBoxId = req.body.agPoBoxId;	var agLanguage = req.body.agLanguage;	var agID1 = req.body.agID1;	var agID2 = req.body.agID2;	var agTel = req.body.agTel;	var agWebsite = req.body.agWebsite;	var reg_email = req.body.agEmail;	var atpos = reg_email.indexOf("@");	var dotpos = reg_email.lastIndexOf(".");	var agNotes = req.body.agNotes;	//not null name	if(agName == "" || agName == null || agName.length<2){		res.redirect('/signup');		 //not null country		}else if(agCountry == "" || agCountry == null){			  res.redirect('/signup');			   	//not null STATE			   	}else if(agState == "" || agState == null){			   	  res.redirect('/signup');			   	//not null city			    	}else if(agCity == "" || agCity == null){			   	  res.redirect('/signup');			   	//not null Destination			   	}else if(agDestination == "" || agDestination == null){			   	  res.redirect('/signup');			       //not null Address					   	}else if(agAddress == "" || agAddress == null){			   	  res.redirect('/signup');			   	 //not null usrID1			   	}else if(agID1 == "" || agID1 == null){			   	  res.redirect('/signup');			   	//not null Tel			       }else if(agTel == "" || agTel == null){			         res.redirect('/signup');			   	//not null ZIP CODE			       }else if(agZip == "" || agZip == null){			         res.redirect('/signup');			   	//not null email			       }else if(reg_email == "" || reg_email == null){			    	  res.redirect('/signup');			      //valid email			    	}else if(atpos < 1 || ( dotpos - atpos < 2 )) {			    	  res.redirect('/signup');			    	//not null password			    	}else{ 				   	   //Create Client Object Client class and client is the new instance of the class			   	    var Agency = Parse.Object.extend("Agencies");			   	    var agency = new Agency();			   	//Save Client			   	  agency.save({			   	    Name: agName,			   		Country: agCountry,			   	    State: agState,			   		City: agCity,			   		Destination: agDestination,			   		Address: agAddress,			   	    Address2: agAddress2,			   		  ZIP: agZip,			   	    Language: agLanguage,			   	    ID1: agID1,			   	    ID2: agID2,			   		PoBox: agPoBox,			   		  PoBoxId: agPoBoxId,			   		Telephone: agTel,			   		  Website: agWebsite,			   		Email: reg_email,			   		  Status: "Pending",			   		Notes: agNotes			   	  }, {			   	    success: function(post) {			   			res.redirect("/clientSuccess");			   	    },			   	    error: function(post, error) {			   	      // The save failed.			   	      // error is a Parse.Error with an error code and message.			   	    }			   	  }); 			   	}			   };// Signs up a new Agency and data validationexports.getby = function(req, res){    var user = Parse.User.current();    var usrClass = Parse.User.current().get("Class");    //Permisions to visit section of the page    if(!Parse.User.current() || usrClass === "client")    {        res.send(JSON.stringify("Bad session"));    }    else    {        //variables que vienen por POST        var by = req.body.by;        var value = req.body.value;        var classvar = req.body.classvar;                        var query = new Parse.Query(classvar);        query.descending('createdAt');        query.equalTo('objectId', 'lQnpIQj6Nz');        query.find(        {            success:                 function(results)                {                    res.send(JSON.stringify(results));                }        });                        }};